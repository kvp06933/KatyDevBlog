@model KatyDevBlog.Models.BlogPost
@inject IImageService _imageService
@inject UserManager<BlogUser> _userManager
@using KatyDevBlog.Services.Interfaces
@using Microsoft.AspNetCore.Identity

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>


<div>
    <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
<div class="main-wrapper">

    <article class="blog-post px-3 py-5 p-md-5">
        <div class="container single-col-max-width">
            <header class="blog-post-header">
                <h2 class="title mb-2">@Model.Title</h2>
                <div class="meta mb-3"><span class="date">Published 2 days ago</span><span class="time">5 min read</span><span class="comment"><a class="text-link" href="#">4 comments</a></span></div>
            </header>

            <div class="blog-post-body">
                <figure class="blog-banner">
                    <img class="img-fluid" src="@_imageService.DecodeImage(@Model.ImageData, @Model.ImageType)" />

                </figure>
                <p>@Model.Content</p>

                <h3 class="mt-5 mb-3">Code Block Example</h3>
                <p>You can get more info at <a class="text-link" href="https://highlightjs.org/" target="_blank">https://highlightjs.org/</a>. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. </p>
                <pre>
                <code>
function $initHighlight(block, cls) {
  try {
    if (cls.search(/\bno\-highlight\b/) != -1)
      return process(block, true, 0x0F) +
             ` class="${cls}"`;
  } catch (e) {
    /* handle exception */
  }
  for (var i = 0 / 2; i < classes.length; i++) {
    if (checkCondition(classes[i]) === undefined)
      console.log('undefined');
  }
}

export  $initHighlight;
					    </code>
				    </pre>
                <h3 class="mt-5 mb-3">Typography</h3>
                <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.</p>
                <h5 class="my-3">Bullet Points:</h5>
                <ul class="mb-5">
                    <li class="mb-2">Lorem ipsum dolor sit amet consectetuer.</li>
                    <li class="mb-2">Aenean commodo ligula eget dolor.</li>
                    <li class="mb-2">Aenean massa cum sociis natoque penatibus.</li>
                </ul>
                <ol class="mb-5">
                    <li class="mb-2">Lorem ipsum dolor sit amet consectetuer.</li>
                    <li class="mb-2">Aenean commodo ligula eget dolor.</li>
                    <li class="mb-2">Aenean massa cum sociis natoque penatibus.</li>
                </ol>
                <h5 class="my-3">Quote Example:</h5>
                <blockquote class="blockquote m-lg-5 py-3   ps-4 px-lg-5">
                    <p class="mb-2">You might not think that programmers are artists, but programming is an extremely creative profession. It's logic-based creativity.</p>
                    <footer class="blockquote-footer mt-0">John Romero</footer>
                </blockquote>@*I want to either allow the user to leave a comment or prompt
                    them to login if they want to leave a comment*@

                @if (User.Identity.IsAuthenticated)
                {
                    //If they are logged in I can show them the creat comment form
                    <div class="row">
                        <h2>Add A Comment</h2>
                        <div class="col-6">
                            <form asp-controller="Comments" asp-action="Create">
                                <input type="hidden" name="BlogPostId" value="@Model.Id" />

                                <div class="form-group">
                                    <textarea name="CommentBody" class="form-control" rows="5"></textarea>
                                </div>

                                <div class="form-group">
                                    <button class="btn btn-dark btn-lg w-100" type="submit">Submit</button>
                                </div>

                            </form>
                        </div>
                    </div>

                }
                else
                {
                    //If the user is not logged in I will prompt them to login in order to see the create comment form
                    <div class="row">
                        <div class="col text-center">
                            <a class="btn btn-lg btn-dark w-75" returnUrl="" asp-area="Identity" asp-page="/Account/Login">Login to add a comment!</a>
                        </div>
                    </div>
                }

                <hr />

                <div class="row">
                    <h2>Comments</h2>

                    @foreach (var comment in Model.Comments.OrderByDescending(c => c.Created))
                    {
                        <div class="offset-1 col-10">

                            <div class="media mb-2">
                                @if (comment.BlogUser.ImageData is not null)
                                {
                                    <img src="@_imageService.DecodeImage(comment.BlogUser.ImageData, comment.BlogUser.ImageType)" class="mr-3 img-fluid" alt="...">
                                }
                                else
                                {
                                    <img src="~/img/defaultUser.png" class="mr-3 img-fluid" alt="...">
                                }

                                <div class="media-body">
                                    <h5 class="mt-0">Created by @comment.BlogUser.FullName on @comment.Created.ToString("MMM dd, yyyy")</h5>
                                    <p>@comment.CommentBody</p>

                                    @*Ask if this is my comment*@
                                    @if (comment.Moderated is null && comment.BlogUserId == _userManager.GetUserId(User))
                                    {
                                        //this button needs to trigger an Edit modal
                                        <button class="btn btn-dark px-3 btnEdit" data-bs-toggle="modal" data-UserCommentId="@comment.Id" data-bs-target="#EditModal">Edit</button>
                                    }
                                      
                                </div>
                            </div>
                        </div>
                    }
                </div>


                @*Modals go here*@
                <div class="modal fade" id="EditModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">Editing Comment...</h5>
                            </div>
                            <div class="modal-body">
                                <form asp-controller="Comments" asp-action="Edit">
                                    <input type="hidden" id="ModalCommentId" name="CommentId" />
                                    <textarea id="ModalCommentBody" name="Body" rows="5" class="w-100"></textarea>
                                    <button class="btn btn-dark w-100" type="submit">Submit</button>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>

                @section Scripts
{
                    <script>
                        document.querySelectorAll("button.btnEdit").forEach(btn => {
                            btn.addEventListener("click", function () {
                                //Transfer the value of the button's data-UserCommentId to the Modals hidden input
                                document.getElementById("ModalCommentId").value = this.getAttribute('data-UserCommentId');
                                //I need to use JS to get the comment closest to the button i just clicked
                                let closestComment = this.closest(".media-body").querySelector("p").textContent;
                                document.getElementById("ModalCommentBody").textContent = closestComment;
                            });
                        });
                    </script>
                }






            </div>

            <nav class="blog-nav nav nav-justified my-5">
                <a class="nav-link-prev nav-item nav-link rounded-left" href="#">Previous<i class="arrow-prev fas fa-long-arrow-alt-left"></i></a>
                <a class="nav-link-next nav-item nav-link rounded-right" href="#">Next<i class="arrow-next fas fa-long-arrow-alt-right"></i></a>
            </nav>



        </div><!--//container-->
    </article>



    <footer class="footer text-center py-4">
        <small class="copyright">Template Copyright &copy; <a href="https://themes.3rdwavemedia.com/" target="_blank">3rd Wave Media</a></small>
    </footer>

</div><!--//main-wrapper-->
